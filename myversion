## This function creates a special "matrix" object that can cache its inverse.

makeCacheMatrix <- function(x = matrix()) {
 inv=NULL
set<- function(y) {x<<-y
                   inv<<-NULL
                   }
get <- function() x
        setmatrix <- function(inverse) inv <<- inverse
        getmatrix <- function() inv
        list(set = set, get = get,
             setmatrix = setmatrix,
             getmatrix = getmatrix)

}


## This function computes the inverse of the special "matrix" 
##returned by makeCacheMatrix above. If the inverse has already been calculated 
##(and the matrix has not changed), 
##then cacheSolve should retrieve the inverse from the cache.

cacheSolve <- function(x, ...) {
 m <- x$getmatrix()
        if(!is.null(inv)) {
                message("getting cached data")
                return(inv)
        }
        data <- x$get()
        inv <- solve(data, ...)
        x$setmatrix(inv)
        inv
        ## Return a matrix that is the inverse of 'x'
}
